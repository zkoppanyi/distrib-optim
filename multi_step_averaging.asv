% distributed averaging
% standard consesus on network-wide mean
% paper: https://pdfs.semanticscholar.org/18ad/bed983ada7e23e31637cb9517436b4cdf392.pdf

clear all; clc;

load('problem')
%xv = rand(n_agents, 1) * 10;
xv = normrnd(15,5,n_agents,1);
mean(xv)

iters = xv;

% 2. Using Laplacian 
%create graph Laplacian
Au = abs(A);
C = [];
for i = 1 : n_agents
    for j = (i+1) : n_agents
        if Au(i,j) == 1
            col = zeros(n_agents, 1);
            col(i) = 1;
            col(j) = -1;
            C = [C, col];
        end;
    end;
end;
L = C*C';

[~, S, ~] = svd(L);
%diagS=S(S>1e-5);
diagS = diag(S);
alpha = (2 / (min(diagS) + max(diagS)))^2;
beta = 

%check conditions
W*ones(size(W,1), 1) 
%== eye(size(W,1), 1)

[S U D] = svd(W-ones(size(W,1), size(W,2))/size(W,1));
max(diag(U)) % < 1

x_prev = zeros(size(xv, 1), 1);
for k = 1 : 120
    x_next = ((1+beta)*eye(size(W,1), size(W,2)) - alpha*W)*xv - beta*(xv-x_prev);
    %x_next = ((1+beta)*eye(size(W,1), size(W,2)) - alpha*W)*xv;
    x_prev = xv;
    xv = x_next;
    iters = [iters, xv];
end;

%iterations
% Au = abs(A);
% for k = 1 : 60    
%     xv2 = xv;
%     for i = 1 : n_agents
%         sxv = W(i,i)*xv2(i);
%         for j = 1 : n_agents
%             if and(Au(i,j) == 1, i~=j)
%                 sxv = sxv + W(i,j)*xv2(j);
%             end;
%         end;
%         xv(i) = sxv ;
%     end;
%     iters = [iters, xv];
% end;
% xv

plot(iters');
